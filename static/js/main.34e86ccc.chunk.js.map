{"version":3,"sources":["components/Clock/ClockPanel.js","components/Clock/constants.js","components/Clock/index.js","App.js","serviceWorker.js","index.js"],"names":["ClockPanel","hourRatio","minuteRatio","secondRatio","className","style","transform","url","initialState","fetchUrl","a","fetch","response","status","json","Error","loadTime","setCurrentDate","dateTime","Date","datetime","reducer","state","action","type","payload","Clock","useReducer","dispatch","useState","currentDate","loading","setLoading","setClock","useCallback","getSeconds","getMinutes","getHours","useEffect","interval","setInterval","Promise","resolve","then","catch","err","clearInterval","console","setTimeout","data","finally","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.34e86ccc.chunk.js","sourcesContent":["import React from 'react'\n\nfunction ClockPanel({hourRatio, minuteRatio, secondRatio}) {\n  return (\n      <div className=\"clock\">\n        <div className=\"hand hour\" style={{transform: `translate(-50%) rotate(${hourRatio * 360}deg)`}}></div>\n        <div className=\"hand minute\"style={{transform: `translate(-50%) rotate(${minuteRatio * 360}deg)`}}  ></div>\n        <div className=\"hand second\"style={{transform: `translate(-50%) rotate(${secondRatio * 360}deg)`}}  ></div>\n        \n        <div className=\"number number1\"><div>1</div></div>\n        <div className=\"number number2\"><div>2</div></div>\n        <div className=\"number number3\"><div>3</div></div>\n        <div className=\"number number4\"><div>4</div></div>\n        <div className=\"number number5\"><div>5</div></div>\n        <div className=\"number number6\"><div>6</div></div>\n        <div className=\"number number7\"><div>7</div></div>\n        <div className=\"number number8\"><div>8</div></div>\n        <div className=\"number number9\"><div>9</div></div>\n        <div className=\"number number10\"><div>10</div></div>\n        <div className=\"number number11\"><div>11</div></div>\n        <div className=\"number number12\"><div>12</div></div>\n      </div>\n    )\n}\n\n\nexport default ClockPanel\n","export const url = 'https://worldtimeapi.org/api/timezone/Europe/Moscow';\n// export const url = 'http://worldtimeapi.org/api/123';\n\nexport const initDelay = 2000;\nexport const intervalDelay = 1000;\n\nexport const errMessage = 'Something wrong';\n\nexport const initialState = {\n    secondRatio: 0,\n    minuteRatio: 0,\n    hourRatio: 0\n};\n","import React, { useState, useEffect, useCallback, useReducer } from 'react';\n\nimport './Clock.css';\nimport ClockPanel from './ClockPanel';\n\nimport {\n    url,\n    initDelay, \n    intervalDelay,\n    errMessage,\n    initialState\n} from './constants';\n\nasync function fetchUrl(url) {\n  let response = await fetch(url);\n    if (response.status === 200) {\n      return response.json();\n    } else {\n      throw new Error(response.status);\n    }\n}\n\nasync function loadTime(url, setCurrentDate) {\n  const dateTime = await fetchUrl(url);\n\n  setCurrentDate(new Date(dateTime.datetime));\n\n  return dateTime;\n}\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'SET_SECOND':\n      return {secondRatio: action.payload};\n    case 'SET_MINUTE':\n      return {minuteRatio: action.payload};\n    case 'SET_HOUR':\n      return {hourRatio: action.payload};\n    case 'SET_MULTIPLE':\n      return {...state, ...action.payload};\n    default:\n      throw new Error();\n  }\n}\n\nfunction Clock() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [loading, setLoading] = useState(true);\n\n  const setClock = useCallback(() => {    \n    dispatch({type: 'SET_SECOND', payload: currentDate.getSeconds() / 60})\n    dispatch({type: 'SET_MINUTE', payload: currentDate.getMinutes() / 60})\n    dispatch({type: 'SET_MULTIPLE', payload: currentDate.getHours() / 12})\n    },\n    [currentDate],\n  )\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      new Promise((resolve) => {\n        resolve(loadTime(url, setCurrentDate));\n      })\n        .then(setClock())\n        .catch((err) => {\n          clearInterval(interval);\n          console.err(`${errMessage}: ${err}`) \n        })\n    }, intervalDelay);\n    return () => {clearInterval(interval)}\n  });\n\n  useEffect(() => {\n    new Promise((resolve) => {\n      setTimeout(() => resolve(loadTime(url, setCurrentDate)), initDelay);\n    })\n      .then((data) => { \n        dispatch({type: 'SET_MULTIPLE', payload: \n        {\n          secondRatio: currentDate.getSeconds() / 60, \n          minuteRatio : currentDate.getMinutes() / 60,\n          hourRatio : currentDate.getHours() / 12\n        }})\n      })\n      .finally(() => setLoading(false))\n      .catch((err) => console.err(`${errMessage}: ${err}`));\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  return (\n    <>\n      {!loading ? \n      <ClockPanel\n        secondRatio={state.secondRatio} \n        minuteRatio={state.minuteRatio} \n        hourRatio={state.hourRatio}\n      /> : 'Loading...'}\n    </>\n  );\n}\n\nexport default Clock;","import React from 'react';\nimport Clock from './components/Clock';\n\nfunction App() {\n  return (\n    <>\n      <Clock/>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}