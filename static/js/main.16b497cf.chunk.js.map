{"version":3,"sources":["contexts/clocker.ts","components/Clock/constants.ts","constants.ts","helpers/errorHandler.ts","helpers/date.ts","helpers/fetch.ts","helpers/index.ts","components/Clock/types/types.ts","hooks/useClockContext.tsx","components/Clock/ClockPanel.tsx","components/Clock/Clock.tsx","components/Clock/Label.tsx","components/Clock/index.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["ClockerContext","React","createContext","url","arabicFormat","romanFormat","initialState","secondRatio","minuteRatio","hourRatio","getErrorMessage","error","maybeError","message","Error","JSON","stringify","String","toErrorWithMessage","getTime","date","action","getSeconds","getMinutes","getHours","getFormat","format","changeTimeZone","timeZone","Date","toLocaleString","fetchApi","a","fetch","response","status","json","loadTime","setCurrentDate","dateTime","datetime","ActionKind","FormatDigits","errorHandler","ClockProvider","props","Provider","value","children","useClockContext","context","useContext","undefined","helpers","ClockPanel","className","style","transform","map","number","index","key","toString","listNumerals","reducer","state","type","payload","Clock","useReducer","dispatch","useState","currentDate","loading","setLoading","isVisible","usePageVisibility","dispatchTime","SET_SECOND","SET_MINUTE","SET_HOUR","setClock","useCallback","useEffect","interval","setInterval","Promise","resolve","then","catch","err","clearInterval","setTimeout","finally","baseColor","height","width","borderRadius","defaultProps","StyledLabel","styled","div","Clocker","initialValue","Label","marginTop","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.16b497cf.chunk.js","sourcesContent":["import React from 'react';\n\nexport type ClockerCtx = {\n    loading: boolean;\n    setLoading: Function;\n}\n\nexport const ClockerContext = React.createContext<ClockerCtx | null>(null);","import { Moscow } from \"../../constants\";\n\nexport const url = `https://worldtimeapi.org/api/timezone/${Moscow}`;\n\nexport const initDelay = 2000;\nexport const intervalDelay = 1000;\n\nexport const errMessage = 'Something wrong';\n\nexport const arabicFormat = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nexport const romanFormat = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII'];\nexport const arabic = 'arabic';\nexport const roman = 'roman';\n\nexport const initialState = {\n    secondRatio: 0,\n    minuteRatio: 0,\n    hourRatio: 0\n};\n","export const Moscow  = 'Europe/Moscow';\nexport const New_York  = 'America/New_York';\nexport const Seoul  = 'Asia/Seoul';\nexport const Tokyo  = 'Asia/Tokyo';\nexport const Berlin  = 'Europe/Berlin';","type ErrorWithMessage = {\n    message: string\n}\n  \nfunction isErrorWithMessage(error: unknown): error is ErrorWithMessage {\n    return (\n        typeof error === 'object' &&\n        error !== null &&\n        'message' in error &&\n        typeof (error as Record<string, unknown>).message === 'string'\n    )\n}\n  \nfunction toErrorWithMessage(maybeError: unknown): ErrorWithMessage {\n    if (isErrorWithMessage(maybeError)) return maybeError\n\n    try {\n        return new Error(JSON.stringify(maybeError))\n    } catch {\n        // fallback in case there's an error stringifying the maybeError\n        // like with circular references for example.\n        return new Error(String(maybeError))\n    }\n}\n  \nexport  function getErrorMessage(error: unknown) {\n    return toErrorWithMessage(error).message\n}","import { arabicFormat, romanFormat, arabic, errMessage } from '../components/Clock/constants';\nimport { getErrorMessage } from './errorHandler'\n\nexport function getTime(date: Date, action: string) {\n  switch (action) {\n    case 'GET_SECOND':\n      return date.getSeconds() / 60;\n    case 'GET_MINUTE':\n      return date.getMinutes() / 60;\n    case 'GET_HOUR':\n      return date.getHours() / 12;\n    default:\n      getErrorMessage(errMessage);\n  }\n}\n\nexport const getFormat = (format: string) => format === arabic ? arabicFormat : romanFormat\n\nexport const changeTimeZone = (date: Date, timeZone: string) => {\n  if (typeof date === 'string') {\n    return new Date(\n      new Date(date).toLocaleString('en-US', {\n        timeZone,\n      }),\n    );\n  }\n\n  return new Date(\n    date.toLocaleString('en-US', {\n      timeZone,\n    }),\n  );\n}","import { getErrorMessage } from \"./errorHandler\";\n\nexport async function fetchApi(url: string) {\n    let response = await fetch(url);\n\n    if (response.status === 200) {\n        return response.json();\n    } else {\n        getErrorMessage(`Request status error: ${response.status}`)\n    }\n}\n  \nexport async function loadTime(url: string, setCurrentDate: Function) {\n    const dateTime = await fetchApi(url);\n\n    setCurrentDate(new Date(dateTime.datetime));\n\n    return dateTime;\n}","import * as date from './date';\nimport * as errorHandler from './errorHandler';\nimport * as fetch from './fetch';\n\nexport default {\n    ...date,\n    ...errorHandler,\n    ...fetch\n};\n","export enum ActionKind {\n    SET_SECOND = 'SET_SECOND',\n    SET_MINUTE = 'SET_MINUTE',\n    SET_HOUR = 'SET_HOUR',\n  }\n\nexport type Action = {\n  type: ActionKind;\n  payload: number;\n}\n\nexport enum FormatDigits {\n  arabic = 'arabic',\n  roman = 'roman'\n}\n\nexport type ContentProps = {\n  format: string\n}","import React, { ReactNode, useContext } from 'react';\nimport { ClockerCtx, ClockerContext } from '../contexts/clocker';\nimport helpers from '../helpers'\n\ninterface Props {\n  children: ReactNode;\n  value: ClockerCtx | null;\n}\n\nfunction ClockProvider(props: Props) {\n  return (\n    <ClockerContext.Provider value={props.value}>{props.children}</ClockerContext.Provider>\n  );\n}\n\nfunction useClockContext() {\n  const context = useContext(ClockerContext);\n  if (context === undefined) {\n    helpers.getErrorMessage(`useClockContext must be used within a ClockProvider`);\n  }\n  return context;\n}\n\nexport { ClockProvider, useClockContext };","import React from 'react'\nimport helpers from '../../helpers'\n\ntype Time = { \n  hourRatio: number; \n  minuteRatio: number;\n  secondRatio: number;\n  format: string;\n}\n\nconst listNumerals = (format: string) => {\n  const formatDigits = helpers.getFormat(format);\n\n  const items = formatDigits.map((number, index) =>\n    <div key={number.toString()} className={`number number${index + 1}`}>\n      <div>{number}</div>\n    </div>\n  );\n  return items;\n};\n\nfunction ClockPanel({hourRatio, minuteRatio, secondRatio, format}: Time) {\n  return (\n      <div className=\"clock\">\n        <div className=\"hand hour\" style={{transform: `translate(-50%) rotate(${hourRatio * 360}deg)`}}></div>\n        <div className=\"hand minute\"style={{transform: `translate(-50%) rotate(${minuteRatio * 360}deg)`}}  ></div>\n        <div className=\"hand second\"style={{transform: `translate(-50%) rotate(${secondRatio * 360}deg)`}}  ></div>\n        \n        {listNumerals(format)}\n      </div>\n    )\n}\n\n\nexport default ClockPanel\n","import React, { useState, useEffect, useCallback, useReducer } from 'react';\nimport { useClockContext } from '../../hooks/useClockContext';\nimport { ClockerCtx } from '../../contexts/clocker';\nimport { State } from './interfaces/interfaces';\nimport { Action, ActionKind, ContentProps } from './types/types';\nimport ClockPanel from './ClockPanel';\nimport { usePageVisibility } from 'react-page-visibility';\nimport Skeleton, { SkeletonTheme } from 'react-loading-skeleton'\nimport 'react-loading-skeleton/dist/skeleton.css'\nimport helpers from '../../helpers';\nimport {\n    url,\n    initDelay, \n    intervalDelay,\n    errMessage,\n    initialState,\n    arabic\n} from './constants';\nimport './Clock.css';\n\nconst reducer = (state: State, action: Action) => {\n  const { type, payload } = action;\n  switch (type) {\n    case 'SET_SECOND':\n      return {...state, secondRatio: payload};\n    case 'SET_MINUTE':\n      return {...state, minuteRatio: payload};\n    case 'SET_HOUR':\n      return {...state, hourRatio: payload};\n    default:\n      throw helpers.getErrorMessage(errMessage);\n  }\n}\n\nfunction Clock({ format } : ContentProps) {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const { loading, setLoading } = useClockContext() as ClockerCtx;\n  const isVisible = usePageVisibility()\n\n  const dispatchTime = () => {\n    dispatch({type: ActionKind.SET_SECOND, payload: helpers.getTime(currentDate, 'GET_SECOND') as number})\n    dispatch({type: ActionKind.SET_MINUTE, payload: helpers.getTime(currentDate, 'GET_MINUTE') as number})\n    dispatch({type: ActionKind.SET_HOUR, payload: helpers.getTime(currentDate, 'GET_HOUR') as number})\n  }\n\n  const setClock = useCallback(() => {\n      dispatchTime()\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [currentDate],\n  )\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (isVisible) {\n        new Promise((resolve) => {\n          resolve(helpers.loadTime(url, setCurrentDate));\n        })\n          .then(() => setClock())\n          .catch((err) => {\n            clearInterval(interval);\n            helpers.getErrorMessage(`${errMessage}: ${err}`);\n          })\n      }\n    }, intervalDelay);\n\n    return () => {clearInterval(interval)}\n  });\n\n  useEffect(() => {\n    new Promise((resolve) => {\n      setTimeout(() => resolve(helpers.loadTime(url, setCurrentDate)), initDelay);\n    })\n      .then(() => dispatchTime())\n      .finally(() => setLoading(false))\n      .catch((err) => helpers.getErrorMessage(`${errMessage}: ${err}`));\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  return (\n    <>\n      {!loading ? \n      <ClockPanel\n        secondRatio={state.secondRatio} \n        minuteRatio={state.minuteRatio} \n        hourRatio={state.hourRatio}\n        format={format}\n      /> : \n      <SkeletonTheme baseColor=\"#dddbdb\" >\n        <Skeleton height={300} width={300} borderRadius={150}></Skeleton>\n      </SkeletonTheme>\n      }\n    </>\n  );\n}\n\nClock.defaultProps = {\n  format: arabic,\n};\n\nexport { Clock };","import React, { ReactNode } from 'react';\nimport Skeleton, { SkeletonTheme } from 'react-loading-skeleton'\nimport 'react-loading-skeleton/dist/skeleton.css'\nimport { useClockContext } from '../../hooks/useClockContext';\nimport { ClockerCtx } from '../../contexts/clocker';\nimport styled from 'styled-components';\n\ninterface Props {\n  children: ReactNode;\n}\n\nconst Label = (props: Props) => {\n  const { loading } = useClockContext() as ClockerCtx;\n\n  return (\n    <>\n      {!loading ? \n        <StyledLabel>{props.children}</StyledLabel> : \n        <SkeletonTheme baseColor=\"#dddbdb\" >\n          <Skeleton height={60} width={300} style={{marginTop: '0.5rem'}}></Skeleton>\n        </SkeletonTheme> \n      }\n    </>\n  );\n}\n\nconst StyledLabel = styled.div`\n  height: 1.4em;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  \n  font-size: 4em;\n  color: #495057;\n`;\n\nexport { Label };","import React, { ReactNode, useState } from \"react\";\nimport { ClockProvider } from \"../../hooks/useClockContext\";\nimport { Clock } from \"./Clock\";\nimport { Label } from \"./Label\";\n\ntype ContentProps = {\n  children: ReactNode;\n  initialValue: boolean | null\n}\n\nconst Clocker = ({ initialValue, ...props} : ContentProps ) => {\n  // const [loading, setLoading] = useState(initialValue);\n  const [loading, setLoading] = useState(true);\n\n  return (\n    <ClockProvider value={{loading, setLoading}}>\n      {props.children}\n    </ClockProvider>\n  );\n}\n\nClocker.defaultProps = {\n  initialValue: false,\n};\n\nClocker.Clock = Clock;\nClocker.Label = Label;\n\nexport { Clocker };","import React from 'react';\nimport { Clocker } from './components/Clock';\nimport { arabic, roman} from './components/Clock/constants';\n\nfunction App() {\n  return (\n    <>\n      {/* <Clocker initialValue={false}> */}\n      <Clocker>\n        <Clocker.Clock format={roman}/>\n        <Clocker.Label>Moscow</Clocker.Label>\n      </Clocker>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}